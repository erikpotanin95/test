// automatically generated by the FlatBuffers compiler, do not modify

package messages;
import com.skillz.server.Message;
import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class MatchSuccess extends Message {
  public static void ValidateVersion() { Constants.FLATBUFFERS_1_12_0(); }
  public MatchSuccess get(ByteBuffer _bb) { return get(_bb, new MatchSuccess()); }
  public MatchSuccess get(ByteBuffer _bb, MatchSuccess obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public MatchSuccess __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public short opcode() { int o = __offset(4); return o != 0 ? bb.getShort(o + bb_pos) : 6; }
  public String registeredMatchId() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer registeredMatchIdAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer registeredMatchIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  public int tickRate() { int o = __offset(8); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public long opponentUserId() { int o = __offset(10); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public String serverVersion() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer serverVersionAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer serverVersionInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }
  public short serverVersionCode() { int o = __offset(14); return o != 0 ? bb.getShort(o + bb_pos) : 0; }

  public static int createMatchSuccess(FlatBufferBuilder builder,
      short opcode,
      int registeredMatchIdOffset,
      int tick_rate,
      long opponentUserId,
      int serverVersionOffset,
      short serverVersionCode) {
    builder.startTable(6);
    MatchSuccess.addOpponentUserId(builder, opponentUserId);
    MatchSuccess.addServerVersion(builder, serverVersionOffset);
    MatchSuccess.addTickRate(builder, tick_rate);
    MatchSuccess.addRegisteredMatchId(builder, registeredMatchIdOffset);
    MatchSuccess.addServerVersionCode(builder, serverVersionCode);
    MatchSuccess.addOpcode(builder, opcode);
    return MatchSuccess.endMatchSuccess(builder);
  }

  public static void startMatchSuccess(FlatBufferBuilder builder) { builder.startTable(6); }
  public static void addOpcode(FlatBufferBuilder builder, short opcode) { builder.addShort(0, opcode, 6); }
  public static void addRegisteredMatchId(FlatBufferBuilder builder, int registeredMatchIdOffset) { builder.addOffset(1, registeredMatchIdOffset, 0); }
  public static void addTickRate(FlatBufferBuilder builder, int tickRate) { builder.addInt(2, tickRate, 0); }
  public static void addOpponentUserId(FlatBufferBuilder builder, long opponentUserId) { builder.addLong(3, opponentUserId, 0L); }
  public static void addServerVersion(FlatBufferBuilder builder, int serverVersionOffset) { builder.addOffset(4, serverVersionOffset, 0); }
  public static void addServerVersionCode(FlatBufferBuilder builder, short serverVersionCode) { builder.addShort(5, serverVersionCode, 0); }
  public static int endMatchSuccess(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public MatchSuccess get(int j) { return get(new MatchSuccess(), j); }
    public MatchSuccess get(MatchSuccess obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

