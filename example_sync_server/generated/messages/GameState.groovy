// automatically generated by the FlatBuffers compiler, do not modify

package messages;
import com.skillz.server.Message;
import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class GameState extends Message {
  public static void ValidateVersion() { Constants.FLATBUFFERS_1_12_0(); }
  public GameState get(ByteBuffer _bb) { return get(_bb, new GameState()); }
  public GameState get(ByteBuffer _bb, GameState obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public GameState __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public short opcode() { int o = __offset(4); return o != 0 ? bb.getShort(o + bb_pos) : 14; }
  public int gameTickCount() { int o = __offset(6); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public int tickCount() { int o = __offset(8); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public int playerScore() { int o = __offset(10); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public int opponentScore() { int o = __offset(12); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public String opponentBoard() { int o = __offset(14); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer opponentBoardAsByteBuffer() { return __vector_as_bytebuffer(14, 1); }
  public ByteBuffer opponentBoardInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 14, 1); }
  public long gameTime() { int o = __offset(16); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }

  public static int createGameState(FlatBufferBuilder builder,
      short opcode,
      int gameTickCount,
      int tickCount,
      int playerScore,
      int opponentScore,
      int opponentBoardOffset,
      long gameTime) {
    builder.startTable(7);
    GameState.addGameTime(builder, gameTime);
    GameState.addOpponentBoard(builder, opponentBoardOffset);
    GameState.addOpponentScore(builder, opponentScore);
    GameState.addPlayerScore(builder, playerScore);
    GameState.addTickCount(builder, tickCount);
    GameState.addGameTickCount(builder, gameTickCount);
    GameState.addOpcode(builder, opcode);
    return GameState.endGameState(builder);
  }

  public static void startGameState(FlatBufferBuilder builder) { builder.startTable(7); }
  public static void addOpcode(FlatBufferBuilder builder, short opcode) { builder.addShort(0, opcode, 14); }
  public static void addGameTickCount(FlatBufferBuilder builder, int gameTickCount) { builder.addInt(1, gameTickCount, 0); }
  public static void addTickCount(FlatBufferBuilder builder, int tickCount) { builder.addInt(2, tickCount, 0); }
  public static void addPlayerScore(FlatBufferBuilder builder, int playerScore) { builder.addInt(3, playerScore, 0); }
  public static void addOpponentScore(FlatBufferBuilder builder, int opponentScore) { builder.addInt(4, opponentScore, 0); }
  public static void addOpponentBoard(FlatBufferBuilder builder, int opponentBoardOffset) { builder.addOffset(5, opponentBoardOffset, 0); }
  public static void addGameTime(FlatBufferBuilder builder, long gameTime) { builder.addLong(6, gameTime, 0L); }
  public static int endGameState(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public GameState get(int j) { return get(new GameState(), j); }
    public GameState get(GameState obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

