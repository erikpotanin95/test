// automatically generated by the FlatBuffers compiler, do not modify

package messages;
import com.skillz.server.Message;
import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class Connect extends Message {
  public static void ValidateVersion() { Constants.FLATBUFFERS_1_12_0(); }
  public Connect get(ByteBuffer _bb) { return get(_bb, new Connect()); }
  public Connect get(ByteBuffer _bb, Connect obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Connect __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public short opcode() { int o = __offset(4); return o != 0 ? bb.getShort(o + bb_pos) : 1; }
  public long userId() { int o = __offset(6); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public String matchId() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer matchIdAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer matchIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  public String externalToken() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer externalTokenAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer externalTokenInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  public String clientVersion() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer clientVersionAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer clientVersionInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }
  public short clientCode() { int o = __offset(14); return o != 0 ? bb.getShort(o + bb_pos) : 0; }
  public short clientPlatform() { int o = __offset(16); return o != 0 ? bb.getShort(o + bb_pos) : 0; }
  public boolean reconnecting() { int o = __offset(18); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }

  public static int createConnect(FlatBufferBuilder builder,
      short opcode,
      long userId,
      int matchIdOffset,
      int externalTokenOffset,
      int clientVersionOffset,
      short clientCode,
      short clientPlatform,
      boolean reconnecting) {
    builder.startTable(8);
    Connect.addUserId(builder, userId);
    Connect.addClientVersion(builder, clientVersionOffset);
    Connect.addExternalToken(builder, externalTokenOffset);
    Connect.addMatchId(builder, matchIdOffset);
    Connect.addClientPlatform(builder, clientPlatform);
    Connect.addClientCode(builder, clientCode);
    Connect.addOpcode(builder, opcode);
    Connect.addReconnecting(builder, reconnecting);
    return Connect.endConnect(builder);
  }

  public static void startConnect(FlatBufferBuilder builder) { builder.startTable(8); }
  public static void addOpcode(FlatBufferBuilder builder, short opcode) { builder.addShort(0, opcode, 1); }
  public static void addUserId(FlatBufferBuilder builder, long userId) { builder.addLong(1, userId, 0L); }
  public static void addMatchId(FlatBufferBuilder builder, int matchIdOffset) { builder.addOffset(2, matchIdOffset, 0); }
  public static void addExternalToken(FlatBufferBuilder builder, int externalTokenOffset) { builder.addOffset(3, externalTokenOffset, 0); }
  public static void addClientVersion(FlatBufferBuilder builder, int clientVersionOffset) { builder.addOffset(4, clientVersionOffset, 0); }
  public static void addClientCode(FlatBufferBuilder builder, short clientCode) { builder.addShort(5, clientCode, 0); }
  public static void addClientPlatform(FlatBufferBuilder builder, short clientPlatform) { builder.addShort(6, clientPlatform, 0); }
  public static void addReconnecting(FlatBufferBuilder builder, boolean reconnecting) { builder.addBoolean(7, reconnecting, false); }
  public static int endConnect(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Connect get(int j) { return get(new Connect(), j); }
    public Connect get(Connect obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

